#ifndef IRQ_H_
#define IRQ_H_

typedef enum BCM_BASIC_INTERRUPTS_e
{
	BCM_BASIC_INTERRUPT_ARM_TIMER		= 0,
	BCM_BASIC_INTERRUPT_ARM_MAILBOX		= 1,
	BCM_BASIC_INTERRUPT_ARM_DOORBELL_0	= 2,
	BCM_BASIC_INTERRUPT_ARM_DOORBELL_1	= 3,
	BCM_BASIC_INTERRUPT_GPU_0_HALTED	= 4,
	BCM_BASIC_INTERRUPT_GPU_1_HALTED	= 5,
	BCM_BASIC_INTERRUPT_ILLEGAL_ACC_TYPE_1	= 6,
	BCM_BASIC_INTERRUPT_ILLEGAL_ACC_TYPE_0	= 7,
	BCM_BASIC_INTERRUPT_TOTAL		= 8,
} BCM_BASIC_INTERRUPT_T;

typedef enum BCM_PERIPHERALS_INTERRUPT_e
{
	BCM_PERIPHERALS_INTERRUPT_SYS_TIMER_MATCH_1	= 1,
	BCM_PERIPHERALS_INTERRUPT_SYS_TIMER_MATCH_3	= 3,
	BCM_PERIPHERALS_INTERRUPT_USB			= 9,
	BCM_PERIPHERALS_INTERRUPT_AUX_INT		= 29,
	BCM_PERIPHERALS_INTERRUPT_I2C_SPI_SLV_INT	= 43,
	BCM_PERIPHERALS_INTERRUPT_PWA_0			= 45,
	BCM_PERIPHERALS_INTERRUPT_PWA_1			= 46,
	BCM_PERIPHERALS_INTERRUPT_SMI			= 48,
	BCM_PERIPHERALS_INTERRUPT_GPIO_INT_0		= 49,
	BCM_PERIPHERALS_INTERRUPT_GPIO_INT_1		= 50,
	BCM_PERIPHERALS_INTERRUPT_GPIO_INT_2		= 51,
	BCM_PERIPHERALS_INTERRUPT_GPIO_INT_3		= 52,
	BCM_PERIPHERALS_INTERRUPT_I2C_INT		= 53,
	BCM_PERIPHERALS_INTERRUPT_SPI_INT		= 54,
	BCM_PERIPHERALS_INTERRUPT_PCM_INT		= 55,
	BCM_PERIPHERALS_INTERRUPT_UART_INT		= 57,
	BCM_PERIPHERALS_INTERRUPT_TOTAL			= 64,
} BCM_PERIPHERALS_INTERRUPT_T;

/* Vector Table for Basic Interrupts handling*/
//typedef	void (* BCM_BASIC_INTERRUPT_HANDLER) (BCM_BASIC_INTERRUPT_T Int_Id, void *pParam);
typedef	void (* BCM_BASIC_INTERRUPT_HANDLER) (void);
typedef struct {
	BCM_BASIC_INTERRUPT_HANDLER	pHandler;
	void				*pParam;
} BCM_BASIC_INTERRUPT_VECTOR;


/* Vector Table for Perpherals Interrupts handling*/
typedef	void (* BCM_PERIPHERALS_INTERRUPT_HANDLER) (BCM_PERIPHERALS_INTERRUPT_T Int_Id, void *pParam);
typedef struct {
	BCM_PERIPHERALS_INTERRUPT_HANDLER	pHandler;
	void					*pParam;
} BCM_PERIPHERALS_INTERRUPT_VECTOR;

int bcm_basic_irq_disable(BCM_BASIC_INTERRUPT_T Int_Id);
int bcm_basic_irq_enable(BCM_BASIC_INTERRUPT_T Int_Id);
int bcm_basic_irq_unregister(BCM_BASIC_INTERRUPT_T Int_Id);
int bcm_basic_irq_register(BCM_BASIC_INTERRUPT_T Int_Id, BCM_BASIC_INTERRUPT_HANDLER pHandler, void *pParam);

int bcm_peripherals_irq_disable(BCM_PERIPHERALS_INTERRUPT_T Int_Id);
int bcm_peripherals_irq_enable(BCM_PERIPHERALS_INTERRUPT_T Int_Id);
int bcm_peripherals_irq_unregister(BCM_PERIPHERALS_INTERRUPT_T Int_Id);
int bcm_peripherals_irq_register(BCM_PERIPHERALS_INTERRUPT_T Int_Id, BCM_PERIPHERALS_INTERRUPT_HANDLER pHandler, void *pParam);

void bcm_irq_Handler(void);

void bcm_irq_check_pending(void);
#endif /* IRQ_H_ */
